import os
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats

data_directory="RQ1-Data"
filename="{}/project_names.txt".format(data_directory)
with open(filename) as f:
    lines = f.readlines()
project_names = [line.rstrip('\n') for line in lines]

# Create directory for saving results if does not exist
result_line_directory="RQ1-Result/Plots/Line-Charts"
if not os.path.exists(result_line_directory):
    os.makedirs(result_line_directory)

result_scatter_directory="RQ1-Result/Plots/Scatter-Plots"
if not os.path.exists(result_scatter_directory):
    os.makedirs(result_scatter_directory)

result_correlation_directory = "RQ1-Result/Correlation"
if not os.path.exists(result_correlation_directory):
    os.makedirs(result_correlation_directory)



# create a dataframe for saving correlation data
correlation_data = pd.DataFrame(columns=["project_name", "correlation_coefficient", "p_value"])

for project_name in project_names:

    # Read project data from csv file
    project_data = pd.read_csv("{}/{}.csv".format(data_directory,project_name))


    print("###### Generating plots for {} project ######".format(project_name))

    # Generate scatter Plot
    plt.scatter(x=project_data.loc[:,"number_of_vulnerabilities"],y=project_data.loc[:,"test_ratio"])
    plt.xlabel("Number of Vulnerabilities")
    plt.ylabel("Test Ratio")
    plt.title(project_name)
    plt.savefig("{}/{}.png".format(result_scatter_directory,project_name))
    plt.close()

    # Generate line chart
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    x=project_data.loc[:,"version_number"]
    y1=project_data.loc[:,"test_ratio"]
    y2= project_data.loc[:,"number_of_vulnerabilities"]
    ax1.plot(x, y1, 'g-')
    ax2.plot(x, y2, 'b-')
    ax1.set_xlabel('Version Number')
    ax1.set_ylabel('Test Ratio', color='g')
    ax2.set_ylabel('Number of Vulnerabilities', color='b')
    plt.title(project_name)
    plt.savefig("{}/{}.png".format(result_line_directory,project_name))
    plt.close()


    # Calculate correlation and p-value
    correlation_coefficient, p_value=scipy.stats.pearsonr(project_data["test_ratio"], project_data["number_of_vulnerabilities"])
    correlation_data = correlation_data.append({"project_name": project_name, "correlation_coefficient":correlation_coefficient,
                                                "p_value":p_value}, ignore_index=True)



print("Total number of projects that have 1)test code, 2)more than three versions 3)inconstant test ratio in different versions:")
print(len(project_names))

print("Number of projects with negative correlation (between test_ratio and number_of_vulnerabilities):")
print(correlation_data[ correlation_data["correlation_coefficient"]<0 ].shape[0])


print("Number of projects with negative correlation (between test_ratio and number_of_vulnerabilities) and p_value less than 0.05:")
print((correlation_data[ (correlation_data["p_value"]<0.05) & (correlation_data["correlation_coefficient"]<0) ]).shape[0])

# Write correlation data in a CSV file
correlation_data.sort_values(by="p_value", inplace=True)
print("###### Writing correlation data in {}/correlation_data.csv ######".format(result_correlation_directory))
correlation_data.to_csv("{}/correlation_data.csv".format(result_correlation_directory),index=False)

