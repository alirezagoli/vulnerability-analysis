import mysql.connector
import pandas as pd
import os


# Connect to database
db = mysql.connector.connect(
    host="localhost",
    user="root",
    passwd="root",
    database="vulinoss"
)
cursor = db.cursor()

# Create directory for saving CSV files if does not exist
directory="RQ1-Data"
if not os.path.exists(directory):
    os.makedirs(directory)

# Create a text file for saving name of projects
file_name="project_names.txt"
project_names_file= open("{}/{}".format(directory,file_name),"w")

# Get name of projects that have test code
query = '''
SELECT 
    DISTINCT vulinoss.project.pname
FROM
    vulinoss.programming_languages
        JOIN
    vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
        JOIN
    vulinoss.project_releases ON (vulinoss.code_metrics.prid = vulinoss.project_releases.id)
        JOIN
    vulinoss.project ON (vulinoss.project_releases.pid = vulinoss.project.id)
WHERE
    vulinoss.code_metrics.testing_loc > 0;
'''

# Execute query
cursor.execute(query)
result = cursor.fetchall()
project_names = pd.DataFrame(result, columns=cursor.column_names)

num_eligible_project=0

# Get data for each project
for i in range(0, project_names.shape[0]):

    # Get version name,test ratio and number of vulnerabilities for each version of the a project
    query = '''
  SELECT
      vulinoss.project_releases.version_name,
      (SUM(vulinoss.code_metrics.testing_loc) / SUM(vulinoss.code_metrics.loc)) * 100 AS test_ratio,
      COUNT(DISTINCT vulinoss.vulnerable_cases.cve) AS number_of_vulnerabilities
  FROM
      vulinoss.code_metrics
          JOIN
      vulinoss.project_releases ON (vulinoss.code_metrics.prid = vulinoss.project_releases.id)
          JOIN
      vulinoss.project ON (vulinoss.project_releases.pid = vulinoss.project.id)
          JOIN
      vulinoss.vulnerable_cases ON (vulinoss.project_releases.id = vulinoss.vulnerable_cases.prid)
  WHERE
      vulinoss.project.pname = '{}'
  GROUP BY vulinoss.project_releases.version_name
  ORDER BY vulinoss.project_releases.version_name;
  '''.format(project_names.iloc[i, 0])

    # Execute query
    cursor.execute(query)
    result = cursor.fetchall()

    # Covert data to pandas dataframe
    project_data = pd.DataFrame(data=result, columns=cursor.column_names)
    project_data["test_ratio"]= project_data["test_ratio"].astype("float64")

    # Filter projects that have less than three versions or have constant testing ratio
    if project_data.shape[0]>=3 and (project_data.iloc[0, 1]!= project_data.iloc[(project_data.shape[0]-1), 1]):

        num_eligible_project=num_eligible_project+1
        project_names_file.write(project_names.iloc[i, 0]+ "\n")

        # Assign a number to each version
        project_data["version_number"] = 0
        for j in range(1, project_data.shape[0] + 1):
            project_data.iloc[j - 1, 3] = j

        # Change to order of columns
        project_data = project_data[["version_number", "version_name", "test_ratio", "number_of_vulnerabilities"]]

        # Write data to CSV file
        print("###### Writing data related to {} project in {}/{}.csv ######".format(project_names.iloc[i,0],directory, project_names.iloc[i, 0]))
        project_data.to_csv(directory+"/" + project_names.iloc[i, 0] + ".csv", index=False)


# Print number of eligible projects
print("Total number of projects that have 1)test code, 2)more than three versions 3)inconstant test ratio in different versions:")
print(num_eligible_project)

# Close file
project_names_file.close()
