import mysql.connector
import pandas as pd
import os


# Connect to database
db = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="root",
  database="vulinoss"
)
cursor = db.cursor()

# Create directory for saving data if does not exist
directory="RQ3-Data"
if not os.path.exists(directory):
    os.makedirs(directory)

# Create a text file for saving name of languages
file_name="language_names.txt"
language_names_file= open("{}/{}".format(directory,file_name),"w")


# List of popular languages
languages=["Java", "C/C++", "Python", "C#", "PHP", "JavaScript"]

for i in range(0,len(languages)):

  if languages[i]!="C/C++":

    # Get loc in a specific programming language for a project version
    query='''
    SELECT
        vulinoss.code_metrics.prid,
        vulinoss.code_metrics.loc AS loc_in_this_language
    FROM
        vulinoss.programming_languages
            JOIN
        vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
    WHERE
        vulinoss.programming_languages.plname = '{}'
    ORDER BY vulinoss.code_metrics.prid;
        '''.format(languages[i])
  else:

    # Get loc in a specific programming language for a project version
    query = '''
    SELECT
        vulinoss.code_metrics.prid,
        SUM(vulinoss.code_metrics.loc) AS loc_in_this_language
    FROM
        vulinoss.programming_languages
            JOIN
        vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
    WHERE
        vulinoss.programming_languages.plname IN ('C' , 'C++', 'C/C++ Header')
    GROUP BY vulinoss.code_metrics.prid
    ORDER BY vulinoss.code_metrics.prid;
         '''

  # Execute query and convert the data to dataframe
  cursor.execute(query)
  result = cursor.fetchall()
  loc_of_pl_data = pd.DataFrame(data=result, columns=cursor.column_names)

  if languages[i] != "C/C++":

    # Get total loc for a project version
    query='''
    SELECT
      vulinoss.code_metrics.prid, SUM(vulinoss.code_metrics.loc) as total_loc
    FROM
      vulinoss.programming_languages
          JOIN
      vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
    WHERE
      vulinoss.code_metrics.prid IN (
          SELECT
              vulinoss.code_metrics.prid
          FROM
              vulinoss.programming_languages
                  JOIN
              vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
          WHERE
              vulinoss.programming_languages.plname = '{}'
              )
    and vulinoss.code_metrics.language_id in (10,11,13,17,18,21,
          24,25,33,43,61,65,66,67,72,79,87,88,89,
          91,92,102,123,124,129,132,133,144,149,
          155,160,167,178,196)
    GROUP BY vulinoss.code_metrics.prid
    order by vulinoss.code_metrics.prid;
    '''.format(languages[i])
  else:

    # Get total loc for a project version (c/c++)
    query='''
    SELECT
        vulinoss.code_metrics.prid, SUM(vulinoss.code_metrics.loc) as total_loc
    FROM
        vulinoss.programming_languages
            JOIN
        vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
    WHERE
        vulinoss.code_metrics.prid IN (
          SELECT DISTINCT
          vulinoss.code_metrics.prid
          FROM
          vulinoss.programming_languages
              JOIN
          vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
          WHERE
          vulinoss.programming_languages.plname IN ('C' , 'C++', 'C/C++ Header')
          ORDER BY vulinoss.code_metrics.prid
          )
    and vulinoss.code_metrics.language_id in (10,11,13,17,18,21,
            24,25,33,43,61,65,66,67,72,79,87,88,89,
            91,92,102,123,124,129,132,133,144,149,
            155,160,167,178,196)
    GROUP BY vulinoss.code_metrics.prid
    order by vulinoss.code_metrics.prid;
    '''

  # Execute query and convert the data to dataframe
  cursor.execute(query)
  result = cursor.fetchall()
  total_loc_data = pd.DataFrame(data=result, columns=cursor.column_names)



  if languages[i] != "C/C++":

    #Get average severity for a project version
    query='''
    SELECT
        vulinoss.code_metrics.prid,
        AVG(vulinoss.cve.cvssV2_base_score) AS average_severity
    FROM
        vulinoss.programming_languages
            JOIN
        vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
            JOIN
        vulinoss.project_releases ON (vulinoss.code_metrics.prid = vulinoss.project_releases.id)
            JOIN
        vulinoss.vulnerable_cases ON (vulinoss.project_releases.id = vulinoss.vulnerable_cases.prid)
            JOIN
        vulinoss.cve ON (vulinoss.vulnerable_cases.cve = vulinoss.cve.id)
    WHERE
        vulinoss.programming_languages.plname = '{}'
    GROUP BY vulinoss.code_metrics.prid
    ORDER BY vulinoss.code_metrics.prid;
    '''.format(languages[i])
  else:

    # Get average severity for a project version (c/c++)
    query = '''
    SELECT
        vulinoss.code_metrics.prid,
        AVG(vulinoss.cve.cvssV2_base_score) AS average_severity
    FROM
        vulinoss.programming_languages
            JOIN
        vulinoss.code_metrics ON (vulinoss.programming_languages.id = vulinoss.code_metrics.language_id)
            JOIN
        vulinoss.project_releases ON (vulinoss.code_metrics.prid = vulinoss.project_releases.id)
            JOIN
        vulinoss.vulnerable_cases ON (vulinoss.project_releases.id = vulinoss.vulnerable_cases.prid)
            JOIN
        vulinoss.cve ON (vulinoss.vulnerable_cases.cve = vulinoss.cve.id)
    WHERE
        vulinoss.programming_languages.plname IN ('C' , 'C++', 'C/C++ Header')
    GROUP BY vulinoss.code_metrics.prid
    ORDER BY vulinoss.code_metrics.prid;
        '''.format(languages[i])

  # Execute query and convert the data to dataframe
  cursor.execute(query)
  result = cursor.fetchall()
  average_severity_data = pd.DataFrame(data=result, columns=cursor.column_names)

  # Merge dataframes in one dataframe and caculate the code ratio of a programming language
  whole_data= pd.DataFrame(loc_of_pl_data["prid"]);
  whole_data["code_ratio_of_pl"] = loc_of_pl_data["loc_in_this_language"] / total_loc_data["total_loc"]
  whole_data["average_severity"] = average_severity_data["average_severity"]

  # Write the data for each language in a CSV file and language name in a text file

  if languages[i] != "C/C++":
    print("###### Writing code ratio data for {} language in {}/{}.csv ######".format(languages[i],directory,languages[i]))
    whole_data.to_csv("{}/{}.csv".format(directory,languages[i]), index=False)
    print("###### Writing name of the {} language in {}/{} ######".format(languages[i], directory,file_name))
    language_names_file.write(languages[i] + "\n")
  else:
    print("###### Writing code ratio data for C/C++ language in {}/{}.csv ######".format(languages[i], directory, "C_C++"))
    whole_data.to_csv("{}/{}.csv".format(directory, "C_C++"), index=False)
    print("###### Writing name of the {} language in {}/{} ######".format("C_C++",directory, file_name))
    language_names_file.write("C_C++" + "\n")
